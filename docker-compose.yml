# [START docker-compose]
version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: florezcook-app
    restart: unless-stopped
    env_file: .env
    environment:
      - FLASK_APP=main.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=mysql+pymysql://${DB_USER}:${DB_PASS}@db:3306/${DB_NAME}
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - /app/instance
    depends_on:
      - db
    networks:
      - app-network
    # Command to run the development server
    command: >
      sh -c "flask run --host=0.0.0.0 --port=8080"

  # Database Service (MySQL 8.0)
  db:
    image: mysql:8.0
    container_name: florezcook-db
    restart: unless-stopped
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    # Health check for the database
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: florezcook-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3

  # Adminer - Database Management
  adminer:
    image: adminer:latest
    container_name: florezcook-adminer
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=db
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      - app-network

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: florezcook-worker
    restart: unless-stopped
    env_file: .env
    environment:
      - C_FORCE_ROOT=1
      - FLASK_APP=main.py
      - FLASK_ENV=development
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
    networks:
      - app-network
    command: >
      sh -c "celery -A app.tasks.celery_worker.celery worker
             --loglevel=info"

  # Celery Beat
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: florezcook-beat
    restart: unless-stopped
    env_file: .env
    environment:
      - C_FORCE_ROOT=1
      - FLASK_APP=main.py
      - FLASK_ENV=development
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
    networks:
      - app-network
    command: >
      sh -c "celery -A app.tasks.celery_worker.celery beat
             --loglevel=info"

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  db_data:
  redis_data:
# [END docker-compose]
